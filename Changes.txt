2010-04-24, S3QL 0.11

  * S3QL file system can now be mounted from /etc/fstab
  
  * Metadata now takes significantly less space.
  
  * Files with extended attributes can now be deleted.
  
  * Extended attributes can now be listed.
  
  * It is now possible to choose between zlib, BZip2 and LZMA compression
    every time the file system is mounted.
  
  * Added contrib/benchmark.py to find out optimal compression method
    for given network bandwidth.

  * fsck.s3ql no longer uses mknod(3) , since that lead to errors on e.g.
    NFS mounted volumes under Fedora. 
    
  * File access, modification and inode change times before 1972 are
    now supported.
  
  * Fixed a deadlock when removing or overwriting files.
  
2010-04-21, S3QL 0.10

  * S3QL now depends on FUSE version 2.8

  * Cached blocks are now flushed to the backend as soon as they have not
    been accessed for more than 10 seconds.

  * The setup script now automatically checks and, if necessary, installs
    the Python module dependencies.
    
  * mkfs.s3ql now creates compressed and encrypted file systems by default.

  * Data is now compressed with LZMA instead of Bzip2.
  
  * Data compression and data upload is now done in parallel, so the full network
    can bandwidth is continuously without breaks for data compression.

  * fsck.s3ql is now several orders of magnitude faster. The code has been
    optimized and some special database indices are now precalculated.

  * When running cp.s3ql, the attributes of the target directory are
    now immediately refreshed (so that e.g. ls immediately shows the
    correct number of hard links).

  * File removal is now significantly faster, since the network transactions
    are carried out asynchronously as part of the cache expiration. 
    
  * mount.s3ql no longer tries to create files with mknod(), since that
    lead to errors on NFS mounted volumes under Fedora. 
  
  * This releases includes a lot of new code, so it may be slightly
    more beta-ish than usual.
    

2010-04-04, S3QL 0.9

  * The --cachedir, --logfile, --awskey and --credfile options are gone and
    have been replaced by --homedir.

  * ~/.awssecret is no longer read, instead there is a common file with
    authentication data for all backends in ~/.s3ql/authinfo

  * The syntax for mounting S3 buckets is now s3://bucketname instead of
    just the bucket name

  * There is now an SFTP backend. Thanks to Ron Knapp <ron.siesta@gmail.com> for
    most of the code.


2010-03-07, S3QL 0.8

  * S3QL now uses Python's default unittest.py instead of shipping its own.

  * Most documentation has been moved from the Wiki into the tarball, so that
    it always corresponds to the correct version.

  * setuptools is now used for installation. This allows .egg creation, dependency
    resolution and generation of the HTML documentation.

  * The S3 part of boto has been integrated into S3QL.

2010-02-22, beta7

  * mount.s3ql no longer chdirs into / when daemonizing but into the
    cache directory.

  * Added example backup script in contrib/backup.py

  * tune.s3ql --change-passphrase is working again

  * Added testcase for tune.s3ql --change-passphrase

  * Internal S3 errors are now handled properly by retrying the upload.

2010-02-19, beta6

 * tune.s3ql --copy is now *really* working properly (brrr)

2010-02-19, beta5

 * mkfs.s3ql now makes strict checks on the bucket name

 * Removed obsolete mount.s3ql_local from distribution

 * tune.s3ql --copy is now working properly

2010-02-19, beta4

    * tune.s3ql now has a --copy option to copy buckets

    * Storage location for new buckets can be specified in mkfs.s3ql and
      tune.s3ql with --s3-location

    * Fixed a deadlock in mount.s3ql when using local buckets without --fg

    * The local: bucket specifier is no longer artificially slow.

    * mount.s3ql: --allow_other is now working

2010-02-04, beta3

    * Fixed a deadlock that caused umount.s3ql to hang indefinitely when
      mount was called without --fg

    * The '.' and '..' directory entries are no longer explicitly stored
      in the database.

    * Rewrote the mechanism to handle delayed updates. Now it no longer depends
      on a small object being propagated relatively fast, but is able to handle
      arbitrary network outages.
