.. -*- mode: rst -*-

==================
 Storage Backends
==================

S3QL can use different protocols to store the file system data.
Independent of the backend that you use, the place where your file
system data is being stored is called a *bucket*. (This is mostly for
historical reasons, since initially S3QL supported only the Amazon S3
backend).

Most backends first try to read the file `~/.s3ql/authinfo` to determine
the username and password for connecting to the remote host. If this
fails, both username and password are read from the terminal.

The `authinfo` file has to contain entries of the form ::

  backend <backend> machine <host> login <user> password <password>

So to use the login `joe` with password `jibbadup` when using the FTP
backend to connect to the host `backups.joesdomain.com`, you would
specify ::

  backend ftp machine backups.joesdomain.com login joe password jibbadup


Currently, S3QL supports the following backends:

Amazon S3
=========

To store your file system in an Amazon S3 bucket, use a storage URL of
the form `s3://<bucketname>` or `s3rr://<bucketname>`. The later form
will use `reduced redundancy storage
<http://aws.amazon.com/s3/#protecting>`_. In theory you could change
the prefix for a given bucket at will, but you really should not do
this because different parts of your file system would then be stored
with different durability guarantees.

When reading the authentication information for the S3 backend from
the `authinfo` file, the `host` field is ignored, i.e. the first entry
with `s3` as a backend will be used. For example ::

   backend s3 machine any myAWSaccessKeyId password myAwsSecretAccessKey

Note that the bucket names come from a global pool, so chances are
that your favorite name has already been taken by another S3 user.
Usually a longer bucket name containing some random numbers, like
`19283712_yourname_s3ql`, will work better.

If you do not already have one, you need to obtain an Amazon S3
account from `Amazon AWS <http://aws.amazon.com/>`_. The account is
free, you will pay only for the amount of storage that you actually
use.

Note that the login and password for accessing S3 are not the user id
and password that you use to log into the Amazon Webpage, but the "AWS
access key id" and "AWS secret access key" shown under `My
Account/Access Identifiers
<https://aws-portal.amazon.com/gp/aws/developer/account/index.html?ie=UTF8&action=access-key>`_.

Local
=====

The local backend stores file system data in a directory on your
computer. The storage URL for the local backend has the form
`local://<path>`. Note that you have to write three consecutive
slashes to specify an absolute path, e.g. `local:///var/archive`.

SFTP / SSH
==========

The SFTP backend uses the SFTP protocol, which is a file transfer
protocol similar to ftp, but uses an encrypted SSH connection. 

Note that the SFTP backend is rather slow and has not been tested
as extensively as the S3 and Local backends.

The storage URL for SFTP connections has the form ::

  sftp://<host>[:port]/<path>

The SFTP backend will always ask you for a password if you haven't
defined one in `~/.s3ql/authinfo`. However, public key authentication
is tried first and the password will only be used if the public key
authentication fails.

The public and private keys will be read from the standard files in
`~/.ssh/`. Note that S3QL will refuse to connect to a computer with
unknown host key; to add the key to your local keyring you have to
establish a connection to that computer with the standard SSH command
line programs first.

