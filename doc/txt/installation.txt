.. -*- mode: rst -*-


==============
 Installation
==============

S3QL depends on several other programs and libraries that have to be
installed first. The best method to satisfy these dependencies depends
on your distribution. In some cases S3QL and all its dependencies can
be installed with as little as three commands, while in other cases more work
may be required.

The `S3QL Wiki <http://code.google.com/p/s3ql/w/list>`_ contains
installation instructions for quite a few different Linux
distributions. You should only use the generic instructions in this
manual if your distribution is not included in the `distribution-specific
installation instructions
<http://code.google.com/p/s3ql/w/list?q=label:Installation>`_ on the wiki.



Runtime Dependencies
====================

The following is a list of the programs and libraries required for
running S3QL. Generally, you should first check if your distribution
already provides a suitable packages and only install from source if
that is not the case.

* Kernel version 2.6.9 or newer. Starting with kernel 2.6.26
  you will get significantly better write performance, so you should
  actually use *2.6.26 or newer whenever possible*.

* The `FUSE Library <http://fuse.sourceforge.net/>`_ should already be
  installed on your system. However, you have to make sure that you
  have at least version 2.8.0. 

* The `XZ Utils <http://tukaani.org/xz/>`_ (formerly known as LZMA
  Utils) are probably available as a package for your system.

* The `PyCrypto++ Python Module
  <http://pypi.python.org/pypi/pycryptopp>`_ may or may not be
  available as a package. To check if this module is installed, try to
  execute `python -c 'import pycryptopp'`. To manually install
  PyCrypto++, download it from the website, extract it and run `python
  setup.py install`.

* The `argparse Python Module
  <http://pypi.python.org/pypi/argparse>`_ is probably 
  available as a package. To check if this module is installed, try to
  execute `python -c 'import argparse'`. To manually install
  argparse, download it from the website, extract it and run `python
  setup.py install`.
  
* The `APSW Python Module <http://code.google.com/p/apsw/>`_ may be
  available as a package, but most likely the version of the package
  will not be recent enough. To check which version of APWS is
  installed, run the command ::

    python -c 'import apsw; print apsw.apswversion(), apsw.sqlitelibversion()'

  If APSW is installed, this should print two version numbers which
  both have to be at least 3.7.0. To install APSW manually, download
  it from the website, extract it and run `python setup.py fetch
  --sqlite install`. You will get a lot of compiler warnings add this
  step, but this is expected and no cause for concern.

* The `PyLibLZMA Python module
  <http://pypi.python.org/pypi/pyliblzma>`_ is probably not yet
  available as a package. It will, however, be automatically
  downloaded and installed during the S3QL installation if required.

  If you want to check if the module is installed, try to execute
  `python -c 'import lzma; print lzma.__version__'`. This should print
  a version number. You need at least version 0.5.3.

* If you want to use the SFTP backend, then you also need the
  `Paramiko Python Module <http://www.lag.net/paramiko/>`_. It may or
  may not be available as a package. To check if this module is
  installed, try to execute `python -c 'import paramiko'`. 

  
Build Dependencies
==================

To build S3QL from source, you must have installed both the runtime
dependencies listed above and the following compile-time dependencies.
Once S3QL has been installed, the compile-time dependencies can be
removed again.

* The **Python development headers** should be available as a
  package in your distribution. The package is typically called
  something like `python-dev`, `python-devel` or `python2.6-devel`.
  To check if this package is installed, try to execute
  `python-config` (it should print out a brief help message).

* The **extended attribute development headers** should be available as a
  package in your distribution. The package is typically called
  something like `libattr-dev`, `libattr1-dev`, `libattr-devel` or
  `libattr1-devel`. To see if this package is installed, check for a
  file called `xattr.h` in either `/usr/include/attr/` or
  `/usr/local/include/attr/`.

* The **pkg-config** program.

* The **FUSE development headers**. If you installed FUSE from source,
  the headers are already installed. If you installed FUSE from a
  package, you probably need to install another package called
  something like `fuse-dev`, `libfuse-dev`, `fuse-devel` or
  `libfuse-devel`.

  To test if the FUSE development headers are installed, run the
  command `pkg-config --modversion fuse`. It should print a version
  number.

* The **XZ-Utils development headers**. If you installed XZ-Utils from
  source, the headers are already installed. If you installed XZ-Utils
  from a package, you probably need to install another package called
  something like `liblzma-dev`, `libxz-dev`, `liblzma-devel` or
  `libxz-devel`.

  To test if the XZ-Utils development headers are installed, run the
  command `pkg-config --modversion liblzma`. It should print a version
  number.

* The `GCC-XML compiler <http://www.gccxml.org>`_ compiler may or may
  not be available as a package. To check if GCC-XML is installed, try
  to run `gccxml --version`. If you need to install GCC-XML manually,
  please refer to the instructions for installing under Fedora or the
  `GCC-XML installation instructions
  <http://www.gccxml.org/HTML/Install.html>`_.

* The `unittest2 Python module <http://pypi.python.org/pypi/pyliblzma>`_ is
  probably not available as a package. It will, however, be
  automatically downloaded and installed during the S3QL installation
  if required.

  If you want to check if the module is installed, try to execute
  `python -c 'import unittest2`. The command should succeed without
  printing anything.


.. _inst-s3ql:

Installing S3QL
===============

To install S3QL itself, proceed as follows:

1. Download S3QL from http://code.google.com/p/s3ql/downloads/list
2. Unpack it into a folder of your choice
3. Run `python setup.py build_ctypes` to build the package
4. Run `python setup.py test` to run a self-test. If this fails, ask
   for help on the `mailing list
   <http://groups.google.com/group/s3ql>`_ or report a bug in the
   `issue tracker <http://code.google.com/p/s3ql/issues/list>`_.

Now you have three options:

* You can run the S3QL commands from the `bin/` directory.

* You can install S3QL system-wide for all users. To do that, you
  have to run `sudo python setup.py install`.

* You can install S3QL into `~/.local` by executing `python
  setup.py install --user`. In this case you should make sure that
  `~/.local/bin` is in your `$PATH` environment variable.
