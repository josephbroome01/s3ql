#!/usr/bin/env python
#
#    Copyright (C) 2008  Nikolaus Rath <Nikolaus@rath.org>
#
#    This program can be distributed under the terms of the GNU LGPL.
#

import unittest
import shutil
import s3ql
import os
import stat
import sys
from os.path import basename
from random import randrange
from optparse import OptionParser
import filecmp

class TestS3QLfs(unittest.TestCase):

    def random_name(self):
        return "s3ql" + str(randrange(10,99,1))

    def test_mkdir(self):
        dirname = self.random_name()
        os.mkdir(base + dirname)
        fstat = os.stat(base + dirname)
        self.assertTrue(stat.S_ISDIR(fstat.st_mode))
        self.assertEquals(os.listdir(base + dirname), [])
        self.assertEquals(fstat.st_nlink, 2)
        self.assertTrue(dirname in os.listdir(base))
        os.rmdir(base + dirname)
        self.assertRaises(OSError, os.stat, base + dirname)
        self.assertFalse(dirname in os.listdir(base))

    def test_symlink(self):
        linkname = self.random_name()
        os.symlink("/imaginary/dest", base + linkname)
        fstat = os.lstat(base + linkname)
        self.assertTrue(stat.S_ISLNK(fstat.st_mode))
        self.assertTrue(os.readlink(base + linkname), "/imaginary/dest")
        self.assertEquals(fstat.st_nlink, 1)
        self.assertTrue(linkname in os.listdir(base))
        os.unlink(base + linkname)
        self.assertRaises(OSError, os.lstat, base + linkname)
        self.assertFalse(linkname in os.listdir(base))

    def test_mknod(self):
        filename = base + self.random_name()
        src = sys.argv[0]
        shutil.copyfile(src, filename)
        fstat = os.lstat(filename)
        self.assertTrue(stat.S_ISREG(fstat.st_mode))
        self.assertEquals(fstat.st_nlink, 1)
        self.assertTrue(basename(filename) in os.listdir(base))
        self.assertTrue(filecmp.cmp(src, filename, False))
        os.unlink(filename)
        self.assertRaises(OSError, os.stat, filename)
        self.assertFalse(basename(filename) in os.listdir(base))


    def test_link(self):
        name1 = base + self.random_name()
        name2 = base + self.random_name()
        src = sys.argv[0]
        shutil.copyfile(src, name1)
        os.link(name1, name2)

        fstat1 = os.lstat(name1)
        fstat2 = os.lstat(name2)

        self.assertEquals(fstat1, fstat2)
        self.assertEquals(fstat1.st_nlink, 2)

        self.assertTrue(basename(name2) in os.listdir(base))
        self.assertTrue(filecmp.cmp(name1, name2, False))
        os.unlink(name2)
        fstat1 = os.lstat(name1)
        self.assertEquals(fstat1.st_nlink, 1)
        os.unlink(name1)

    def test_readdir(self):
        dir = base + self.random_name()
        file = dir + "/" + self.random_name()
        subdir = dir + "/" + self.random_name()
        subfile = subdir + "/" + self.random_name()
        src = sys.argv[0]

        os.mkdir(dir)
        shutil.copyfile(src, file)
        os.mkdir(subdir)
        shutil.copyfile(src, subfile)

        listdir_is = os.listdir(dir)
        listdir_is.sort()
        listdir_should = [ basename(file), basename(subdir) ]
        listdir_should.sort()
        self.assertEquals(listdir_is, listdir_should)

        os.unlink(file)
        os.unlink(subfile)
        os.rmdir(subdir)
        os.rmdir(dir)


# TESTS TO IMPLEMENT:
# - Check that s3 objects are committed after fsync
# - run fsck.s3ql


if __name__ == '__main__':
    # FIXME: Read AWS credentials from commandline and mount
    # system manually. Then do some more invasive tests as
    # well.

    parser = OptionParser(
        usage="%prog [options] <mountpoint>\n"
              "       %prog --help",
        description="Tests s3ql. An s3qlfs needs to be mounted at <mountpoint>.")
    parser.add_option("-f", action="store_true", default=False,
                      dest="force", help="Remove test directory if it exists.")

    (options, pps) = parser.parse_args()


    #
    # Verify parameters
    #
    if not len(pps) == 1:
        parser.error("Wrong number of parameters")
    mountpoint = pps[0]
    mountpoint = mountpoint.rstrip("/") + "/"
    if not os.path.exists(mountpoint):
        parser.error("Mountpoint does not exist")

    base = mountpoint + "test_sq3ql_fzreoue1"
    if os.path.exists(base):
        if not options.force:
            parser.error("Test directory %s already exists, aborting" % base)
        else:
            shutil.rmtree(base)
    os.mkdir(base)
    base = base + "/"


    #
    # Run tests
    #
    suite = unittest.TestLoader().loadTestsFromTestCase(TestS3QLfs)
    unittest.TextTestRunner(verbosity=1).run(suite)

    shutil.rmtree(base)
